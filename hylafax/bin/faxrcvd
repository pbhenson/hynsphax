#! /usr/bin/perl
#
# Copyright 2019-2020 Paul B. Henson <henson@acm.org>
#
# hynsphax is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Please see the LICENSE file for further details, or visit the URL
#
#         https://www.gnu.org/licenses/

use strict;
use warnings;

use DBI ();
use File::Basename ();
use LWP::UserAgent ();
use Sys::Hostname ();
use Unix::Syslog ();
use URI::Escape;

my $now = time();

require '/etc/hylafax/hynsphax.conf';
require '/etc/hylafax/hynsphax-common.pl';
require '/etc/hylafax/hynsphax-common-fb.pl';

my $debug = hynsphax_config('debug') // 0;
_log_debug($debug);

my $syslog_facility = hynsphax_config('syslog_facility') // Unix::Syslog::LOG_DAEMON;
Unix::Syslog::openlog('hynsphax-faxrcvd', Unix::Syslog::LOG_PID, $syslog_facility);

# set umask so web server can read generated fax files
umask(0027);

my $hostname = Sys::Hostname::hostname();
my $hostrole = hynsphax_config('role') // '';

my $hf_dir = '/var/spool/hylafax';
my $hf_conf = read_hf_config();

# define routing for destination handlers
my $dest_handlers = {
	# generate phaxio compatible callback to a netsapiens server
	netsapiens => \&netsapiens_hander,
	# pass fax to a faxback ata connector instance
	faxback => \&faxback_hander,
	# dump on floor
	null => \&null_handler,
};

my $dbh_config = dbi_connect(hynsphax_config('db_config_list'));
if (!$dbh_config) {
	_logp("error: failed to connect to config database");
	exit(1);
}

my $dbh_hy_queue = dbi_connect(hynsphax_config('db_hy_queue_list'));
if (!$dbh_hy_queue) {
	_logp("error: failed to connect to hy queue database");
	exit(1);
}

my $dbh_fb_queue;
my $db_fb_queue_list = hynsphax_config('db_fb_queue_list');
if ($db_fb_queue_list) {
	$dbh_fb_queue = dbi_connect($db_fb_queue_list);
	if (!$dbh_fb_queue) {
		_logp("error: failed to connect to fb queue database");
		exit(1);
	}
}
else {
	$dbh_fb_queue = $dbh_config;
}

my $node_qh = query($dbh_config, 'select node_id from hy_servers where hostname = ?', $hostname);
if (!$node_qh) {
	_logp("error: failed to look up server node");
	exit(1);
}

my ($node_id) = $node_qh->fetchrow_array();
if (!defined($node_id)) {
	_logp("error: node id for server $hostname not found");
	exit(1);
}
_logd("server $hostname node_id $node_id" . ($hostrole && " role $hostrole"));

my $retval;

if (@ARGV == 1 && $ARGV[0] eq '--process-queue') {
	_logd("processing queued inbound fax deliveries");

	if (mkdir("$hf_dir/tmp/faxrcvd-queue.lock")) {
		$retval = process_queue();
		if (!rmdir("$hf_dir/tmp/faxrcvd-queue.lock")) {
			_log("error: failed to remove queue lockfile - $!");
			$retval = 1;
		}
	}
	else {
		if ($! == 17) { # EEXIST
			_log("warning: queue lockfile exists, skipping run");
			$retval = 0;
		}
		else {
			_log("error: failed to create queue lockfile - $!");
			$retval = 1;
		}
	}
}
elsif (@ARGV >= 4) {
	_logd("processing realtime inbound fax delivery - " . join(' ', @ARGV));

	$retval = process_fax(@ARGV);
}
else {
	print "Usage:\n";
	print "\t$0 file devID commID error-msg [ callID-1 [ callID-2 [ ... [ callID-n ] ] ] ]\n";
	print "\t$0 --process-queue\n";

	_log('error: bad arguments - ' . join(' ', @ARGV));

	$retval = 1;
}

_logd("processing complete");

exit($retval);

sub process_fax {
	my $file = $hf_dir . '/' . shift;
	my $filename = File::Basename::basename($file,  ".tif");
	my $id = $filename;
	$id =~ s/^fax//;
	my $device = shift;
	my $commid = shift;
	my $msg = shift;
	my $cid_from = shift;
	my $cid_to = shift;
	my @cidextra = @_;

	if (! -f $file) {
		_logp("error: file $file not found");
		return 1;
	}

	_logd("reading faxinfo from $file");
	my $faxinfo;
	my ($status, $output) = read_pipe($hf_conf->{INFO}, '-n', $file);

	if ($status < 0) {
		_logp("error: faxinfo failed to execute");
		return 1;
	}
	elsif ($status != 1) {
		_logp("error: faxinfo on $file failed");
		foreach (@{$output}) {
			_logp("\t$_");
		}
		return 1;
	}
	else {
		foreach (@{$output}) {
			if (/^\s*([^:]+): (.*)$/) {
				_logd("faxinfo: $1 = $2");
				$faxinfo->{$1} = $2;
			}
			else {
				_log("warning: unexpected output from faxinfo - $_");
			}
		}

		if (keys(%{$faxinfo}) < 1) {
			_logp("error: faxinfo on $file returned no data");
			return 1;
		}
	}

	_logd("generating pdf");
	($status, $output) = read_pipe($hf_conf->{TIFF2PDF}, '-o',
				       "$hf_dir/recvq-pdf/$filename.pdf", $file);

	if ($status < 0) {
		_logp("error: tiff2pdf failed to execute");
		return 1;
	}
	elsif ($status != 1) {
		_logp("error: tiff2pdf on $file failed");
		foreach (@{$output}) {
			_logp("\t$_");
		}
		return 1;
	}
	else {
		foreach (@{$output}) {
			_log("warning: unexpected output from faxinfo - $_");
		}
	}

	my @jpg_resolution = (129, 167);
	my $jpg_scale = hynsphax_config('jpg_s_scale');
	if (defined($jpg_scale)) {
		if ($jpg_scale > 0 && $jpg_scale =~ /^\d?\.?\d+$/) {
			$jpg_resolution[0] = int($jpg_resolution[0]*$jpg_scale + 0.5);
			$jpg_resolution[1] = int($jpg_resolution[1]*$jpg_scale + 0.5);
			_logd("jpg_s_scale = $jpg_scale, resolution set to " . join('x', @jpg_resolution));
		}
		else {
			_logp("warning: ignoring invalid jpg_s_scale $jpg_scale");
		}
	}

	my $jpg_convert_src_params = hynsphax_config('jpg_convert_src_params') // '-density 72';
	my $jpg_convert_dst_params = hynsphax_config('jpg_convert_dst_params') // '';

	_logd("generating small jpeg preview using params '$jpg_convert_src_params' / '$jpg_convert_dst_params'");
	($status, $output) = read_pipe('/usr/bin/convert', split(/\s+/, $jpg_convert_src_params),
				       "${file}[0]", split(/\s+/, $jpg_convert_dst_params), '-resize',
				       join('x', @jpg_resolution), "$hf_dir/recvq-pdf/$filename-s.jpg");

	if ($status < 0) {
		_logp("error: convert (small) failed to execute");
		return 1;
	}
	elsif ($status != 1) {
		_logp("error: convert (small) on $file failed");
		foreach (@{$output}) {
			_logp("\t$_");
		}
		return 1;
	}
	else {
		foreach (@{$output}) {
			_log("warning: unexpected output from convert (small) - $_");
		}
	}

	@jpg_resolution = (300, 388);
	$jpg_scale = hynsphax_config('jpg_l_scale');
	if (defined($jpg_scale)) {
		if ($jpg_scale > 0 && $jpg_scale =~ /^\d?\.?\d+$/) {
			$jpg_resolution[0] = int($jpg_resolution[0]*$jpg_scale + 0.5);
			$jpg_resolution[1] = int($jpg_resolution[1]*$jpg_scale + 0.5);
			_logd("jpg_l_scale = $jpg_scale, resolution set to " . join('x', @jpg_resolution));
		}
		else {
			_logp("warning: ignoring invalid jpg_l_scale $jpg_scale");
		}
	}

	_logd("generating large jpeg preview using params '$jpg_convert_src_params' / '$jpg_convert_dst_params'");
	($status, $output) = read_pipe('/usr/bin/convert', split(/\s+/, $jpg_convert_src_params),
				       "${file}[0]", split(/\s+/, $jpg_convert_dst_params), '-resize',
				       join('x', @jpg_resolution), "$hf_dir/recvq-pdf/$filename-l.jpg");

	if ($status < 0) {
		_logp("error: convert (large) failed to execute");
		return 1;
	}
	elsif ($status != 1) {
		_logp("error: convert (large) on $file failed");
		foreach (@{$output}) {
			_logp("\t$_");
		}
		return 1;
	}
	else {
		foreach (@{$output}) {
			_log("warning: unexpected output from convert (large) - $_");
		}
	}


	_logd("querying destinations for $cid_to");
	my ($fax_qh) = query($dbh_config, 'select destinations from fax where number = ?');
	if (!$fax_qh) {
		_logp("error: failed to prepare fax destination query");
		return 1;
	}

	$status = query($dbh_config, $fax_qh, $cid_to);
	if (!$status) {
		_logp("error: failed to look up destination for $cid_to");
		return 1;
	}

	my ($dest_list) = $fax_qh->fetchrow_array();
	if (!$dest_list) {
		_log("warning: destination for $cid_to not found, checking for default");
		$status = query($dbh_config, $fax_qh, 'default');
		if (!$status) {
			_logp("error: failed to lookup default destination");
			return 1;
		}
		($dest_list) = $fax_qh->fetchrow_array();
		if (!$dest_list) {
			_logp("error: no destinations for $cid_to found");
			return 1;
		}
	}
	_logd("found destinations $dest_list");

	my ($fail_qh) = query($dbh_hy_queue, 'insert into inbound ' .
					  '(id, received_time, pages, cid_from, cid_to, destination, ' .
					  'retry_count, retry_time) values ' .
					  '(?, ?, ?, ?, ?, ?, 0, ?)');
	if (!$fail_qh) {
		_logp("error: failed to prepare fail query");
		return 1;
	}

	foreach my $dest (split(/;/, $dest_list)) {
		_logd("processing destination $dest");
		my $status = process_dest($id, $now, $faxinfo->{Pages}, $cid_from, $cid_to, $dest);

		if (!$status) {
			_logd("all destination options failed, queueing for retry");

			$status = query($dbh_hy_queue, $fail_qh, $id, $now, $faxinfo->{Pages},
					$cid_from, $cid_to, $dest, $now);

			if (!$status) {
				_log("error: failed to insert ($id, $now, $faxinfo->{Pages}, " .
				     "$cid_from, $cid_to, $dest, $now) into inbound hy queue");
			}
		}
	}

	return 0;
}

sub process_queue {
	my $retry_backoff = hynsphax_config('inbound_retry_backoff');
	if (!defined($retry_backoff)) {
		_logp("error: no inbound_retry_backoff configured");
		return 1;
	}

	my ($remove_qh) = query($dbh_hy_queue, 'delete from inbound where ' .
					     'id = ? and destination = ?');
	if (!$remove_qh) {
		_logp("error: failed to prepare remove query");
		return 1;
	}

	my ($retry_qh) = query($dbh_hy_queue, 'update inbound set retry_count = ?, retry_time = ? ' .
					   'where id = ? and destination = ?');
	if (!$retry_qh) {
		_logp("error: failed to prepare retry query");
		return 1;
	}

	my $inbound_qh = query($dbh_hy_queue, 'select id, received_time, pages, cid_from, cid_to, '.
					   'destination, retry_count, retry_time from inbound');

	if (!$inbound_qh) {
		_logp("error: failed to query inbound hy queue");
		return 1;
	}

	my ($id, $received_time, $pages, $cid_from, $cid_to, $dest, $retry_count, $retry_time);
	while (($id, $received_time, $pages, $cid_from, $cid_to, $dest,
		$retry_count, $retry_time) = $inbound_qh->fetchrow_array()) {

		_logd("hy queue entry $id, $received_time, $pages, $cid_from, $cid_to, " .
		     "$dest, $retry_count, $retry_time");

		$retry_count++;

		my $delay = 0;
		foreach (@{$retry_backoff}) {
			if ($retry_count <= $_->[0]) {
				$delay = $_->[1];
				_logd("found delay $delay for retry $retry_count");
				last;
			}
		}

		my $status;
		if (!$delay) {
			_logd("retry $retry_count count exceeded");
		}
		elsif ($now - $retry_time <= $delay) {
			_logd("retry delay not met");
			next;
		}
		else {
			_logd("retrying $dest");
			$status = process_dest($id, $received_time, $pages, $cid_from, $cid_to, $dest);
			if (!$status) {
				_logd("retry failed, updating hy queue entry");

				$status = query($dbh_hy_queue, $retry_qh, $retry_count, $now,
						$id, $dest);
				if (!$status) {
					_log("error: failed to update ($id, $dest) retry status");
				}
				elsif ($status->rows() != 1) {
					_log("error: ($id, $dest) retry status not update");
				}
				next;
			}
			else {
				 _logd("retry succeeded");
			}
		}

		 _logd("removing from inbound hy queue");
		$status = query($dbh_hy_queue, $remove_qh, $id, $dest);
		if (!$status) {
			_log("error: failed to remove from inbound hy queue");
		}
		elsif ($status->rows() != 1) {
			_log("error: not removed from inbound hy queue");
		}
	}

	return 0;
}

sub read_hf_config {
	_logd("reading hylafax config");

	if (! -f "$hf_dir/etc/setup.cache") {
		logp("error: $hf_dir/etc/setup.cache is missing");
		exit(1)
	};

	if (!open(HF_CONF, "<$hf_dir/etc/setup.cache")) {
		logp("error: unable to open $hf_dir/etc/setup.cache - $!");
		exit(1);
	}

	my %hf_conf;

	while (<HF_CONF>) {
		chomp;
		next if /^#/;
		s/#.*//;
		my ($var, $value) = split /=/;
		if (defined($var) && defined ($value)) {
			$value =~ s/^'//; $value =~ s/'$//;
			_logd("hylafax $var = $value");
			$hf_conf{$var} = $value;
		}
	}

	close(HF_CONF);

	if (!exists($hf_conf{INFO})) {
		_logd("hylafax adding INFO = " . $hf_conf{SBIN} . '/faxinfo');
		$hf_conf{INFO} = $hf_conf{SBIN} . '/faxinfo';
	}
	if (!exists($hf_conf{FAX2PS})) {
		_logd("hylafax adding FAX2PS = " . $hf_conf{TIFFBIN} . '/fax2ps');
		$hf_conf{FAX2PS} = $hf_conf{TIFFBIN} . '/fax2ps';
	}
	if (!exists($hf_conf{TIFF2PS})) {
		_logd("hylafax adding TIFF2PS = " . $hf_conf{TIFFBIN} . '/tiff2ps');
		$hf_conf{TIFF2PS} = $hf_conf{TIFFBIN} . '/tiff2ps';
	}
	if (!exists($hf_conf{TIFFINFO})) {
		_logd("hylafax adding TIFFINFO = " . $hf_conf{TIFFBIN} . '/tiffinfo');
		$hf_conf{TIFFINFO} = $hf_conf{TIFFBIN} . '/tiffinfo';
	}

	return \%hf_conf;
}

sub process_dest {
	my ($id, $received_time, $pages, $cid_from, $cid_to, $dest) = @_;

	if ($dest =~ s/^\(([^\)]+)\)//) {
		my $dest_role = $1;
		my $role_match = $dest_role =~ s/^!// ? 'exclude' : 'require';

		_logd("destination ${role_match}s role $dest_role");

		if (($role_match eq 'require' && $dest_role ne $hostrole) ||
		    ($role_match eq 'exclude' && $dest_role eq $hostrole)) {
			_logd("skipping destination");
			return 1;
		}
	}
	else {
		_logd("destination not role restricted");
	}

	my $status = 0;

	foreach my $dest_option (split(/\|/, $dest)) {
		_logd("trying destination $dest_option");

		my ($label, $options) = split(/:/, $dest_option);

		if (exists($dest_handlers->{$label})) {
			_logd("calling handler for $label");
			$status = $dest_handlers->{$label}->($id, $received_time, $pages,
							     $cid_from, $cid_to, $options);
			if ($status) {
				_logd("destination successful");
				last;
			}
			else {
				_logd("destination failed");
			}
		}
		else {
			_log("error: no handler found for destination type $label");
		}
	}

	return $status;
}

sub null_handler {
	my ($id, $received_time, $pages, $cid_from, $cid_to, $handler_options) = @_;

	_logd("fax id $id from $cid_from to $cid_to, please meet round file");

	return 1;
}

my $ua;

my $ns_hgroup_query;
my $ns_hgroups;

sub netsapiens_hander {
	my ($id, $received_time, $pages, $cid_from, $cid_to, $handler_options) = @_;

	my $options;
	foreach my $h_opt (split(/,/, $handler_options)) {
		my ($opt, $value) = split(/=/, $h_opt);

		_logd("netsapiens_hander: $opt = $value");
		$options->{$opt} = $value;
	}
	foreach (qw(host domain user)) {
		if (!exists($options->{$_})) {
			_log("error: phaxio notify missing required $_ option");
			return 0;
		}
	}

	my @hosts;
	if ($options->{host} =~ /^@(.*)/) {
		my $hgroup = $1;
		_logd("expanding ns host group $hgroup");

		if (exists($ns_hgroups->{$hgroup})) {
			_logd("using cached members " . join(',', @{$ns_hgroups->{$hgroup}}));
			@hosts = @{$ns_hgroups->{$hgroup}};
		}
		else {
			if (!ref($ns_hgroup_query)) {
				($ns_hgroup_query) = query($dbh_config,
							   'select hostname from ns_servers where hgroup = ?');
				if (!$ns_hgroup_query) {
					_logp("error: failed to prepare ns_hgroup_query query");
					return 0;
				}
			}

			my $host_q = query($dbh_config, $ns_hgroup_query, $hgroup);
			if (!$host_q) {
				_logp("error: failed to execute ns_hgroup_query query on $hgroup");
				return 0;
			}

			while (my $host = $host_q->fetchrow_array()) {
				_logd("found $host");
				push(@hosts, $host);
			}

			if (@hosts == 0) {
				_logp("error: ns hgroup $hgroup contains no members");
				return 0;
			}

			$ns_hgroups->{$hgroup} = [ @hosts ];
		}
	}
	else {
		push(@hosts, $options->{host});
	}

	if (!ref($ua)) {
		$ua = LWP::UserAgent->new(timeout => 30, keep_alive => 1);
	}

	my $phaxio_ssl = $options->{ssl} // hynsphax_config('phaxio_ssl') // 1;

	my $ns_id = "${node_id}0${id}";

	my $fax_json_template = '{"id":"%s","num_pages":%s,"cost":0,' .
				'"direction":"received","status":"success",' .
				'"is_test":false,"requested_at":%s,"completed_at":%s,' .
				'"from_number":"%s","to_number":"%s"}';

	my $fax_json = sprintf($fax_json_template, json_escape($ns_id), json_escape($pages),
			       json_escape($received_time), json_escape($now), json_escape($cid_from),
			       json_escape($cid_to));
	_logd("fax json = $fax_json");

	my $status = 0;
	foreach my $host (@hosts) {
		_logd("trying host $host");

		my $url = $phaxio_ssl ? 'https://' : 'http://';
		$url .= $host;
		if (exists($options->{port})) {
			$url .= ':' . $options->{port};
		}
		$url .= '/ns-api/?object=phaxio&action=create&domain=';
		$url .= uri_escape($options->{domain}) . '&uid=';
		$url .= uri_escape($options->{user}) . '@' . uri_escape($options->{domain});
		_logd("url = $url");

		my $response;
		eval {
			$response = $ua->post($url, Content_Type => 'form-data',
						       Content => [
								fax => $fax_json,
								direction => 'received',
								is_test => 'false',
								success => 'true',
								filename => [ "$hf_dir/recvq-pdf/fax${id}.pdf" ],
							  ]);
		};

		if ($@) {
			_log("error: phaxio notify post to $host failed - $@");
			next;
		}

		if (!$response->is_success()) {
			_log("error: phaxio notify to $host failed - " . $response->status_line());
			_logd("failure content - " . $response->content());
			next;
		}
		else {
			if ($response->code() != 202) {
				_logd("warning: phaxio notify status " . $response->code() . " != 202");
			}
			_logd("phaxio notify successful");
			$status = 1;
			last;
		}
	}

	return $status;
}

my $fb_hgroup_query;
my $fb_hgroups;
my $fb_queue_qh;

sub faxback_hander {
	my ($id, $received_time, $pages, $cid_from, $cid_to, $handler_options) = @_;

	my $options;
	foreach my $h_opt (split(/,/, $handler_options)) {
		my ($opt, $value) = split(/=/, $h_opt);

		_logd("faxback_hander: $opt = $value");
		$options->{$opt} = $value;
	}
	foreach (qw(host ata)) {
		if (!exists($options->{$_})) {
			_log("error: faxback deliver missing required $_ option");
			return 0;
		}
	}

	_logd("from $cid_from to $cid_to @ $options->{ata} via $options->{host}");
	_logd("hosting guid $options->{guid}") if exists($options->{guid});

	my @hosts;
	if ($options->{host} =~ /^@(.*)/) {
		my $hgroup = $1;
		_logd("expanding fb host group $hgroup");

		if (exists($fb_hgroups->{$hgroup})) {
			_logd("using cached members " . join(',', @{$fb_hgroups->{$hgroup}}));
			@hosts = @{$fb_hgroups->{$hgroup}};
		}
		else {
			if (!ref($fb_hgroup_query)) {
				($fb_hgroup_query) = query($dbh_config,
							   'select hostname from fb_servers where hgroup = ?');
				if (!$fb_hgroup_query) {
					_logp("error: failed to prepare fb_hgroup_query query");
					return 0;
				}
			}

			my $host_q = query($dbh_config, $fb_hgroup_query, $hgroup);
			if (!$host_q) {
				_logp("error: failed to execute fb_hgroup_query query on $hgroup");
				return 0;
			}

			while (my $host = $host_q->fetchrow_array()) {
				_logd("found $host");
				push(@hosts, $host);
			}

			if (@hosts == 0) {
				_logp("error: fb hgroup $hgroup contains no members");
				return 0;
			}

			$fb_hgroups->{$hgroup} = [ @hosts ];
		}
	}
	else {
		push(@hosts, $options->{host});
	}

	my $ata_number;
	if ($options->{ata} =~ /@/) {
		($ata_number, $options->{ata}) = split(/@/, $options->{ata});
		_logd("overriding ata_number to $ata_number");
	}
	else {
		$ata_number = $cid_to;
	}

	my $number_strip_plus = hynsphax_config('fb_number_strip_plus') // 1;
	_logd("number_strip_plus = $number_strip_plus");
	if ($ata_number =~ /^\+/ && $number_strip_plus) {
		$ata_number =~ s/^\+//;
		_logd("stripping plus from ata number");
	}

	my ($ata_key, $ata_value);
	if ($options->{ata} =~ /:/) {
		($ata_key, $ata_value) = split(/:/, $options->{ata});
	}
	else {
		($ata_key, $ata_value) = ('username', $options->{ata});
	}

	_logd("dest ata $ata_key $ata_value");
	my $ata = ata_record($dbh_config, $ata_key, $ata_value);

	if (!defined($ata)) {
		_log("error: faxback ata $ata_key $ata_value not found");
		return 0;
	}

	if (!ref($ata)) {
		_log("error: faxback ata db lookup failed - $ata");
		return 0;
	}

	if (!$ata->{active} && !hynsphax_config('fb_inactive_deliver')) {
		_log("error: faxback ata $ata_key $ata_value not active");
		return 0;
	}

	my $line_index;
	foreach my $line (@{$ata->{line_options}}) {
		if ($line->{PhoneNumber} eq $ata_number) {
			$line_index = $line->{Index};
		}
	}

	if (!defined($line_index)) {
		_log("error: number $ata_number not associated with faxback ata $ata_key $ata_value");
		return 0;
	}
	_logd("line_index = $line_index");

	if (!ref($ua)) {
		$ua = LWP::UserAgent->new(timeout => 30, keep_alive => 1);
	}

	my $fb_ssl = $options->{ssl} // hynsphax_config('fb_ssl') // 1;

	my $post_content = [
		ServiceName => 'ConnectorService',
		Function => 'DeliverImage',
		AccountId => $ata->{username},
		PhoneNumber => $ata_number,
		MessageType => 1,
		CallingNumber => $cid_from,
		CallingStationId => $cid_from,
		'faximage.tif' => [ "$hf_dir/recvq/fax${id}.tif",
				    'faximage.tif' ],
		];
	if (exists($options->{guid})) {
		push(@{$post_content}, ProviderGuid => $options->{guid});
	}

	my $status = 0;
	foreach my $host (@hosts) {
		_logd("trying host $host");

		my $url = $fb_ssl ? 'https://' : 'http://';
		$url .= $host;
		if (exists($options->{port})) {
			$url .= ':' . $options->{port};
		}
		$url .= '/nsps/nsps.aspx?target=atamime';
		_logd("url = $url");

		my $response;
		eval {
			$response = $ua->post($url, Content_Type => 'form-data', Content => $post_content);
		};

		if ($@) {
			_log("error: faxback post to $host failed - $@");
			next;
		}

		if (!$response->is_success()) {
			_log("error: faxback post to $host failed - " . $response->status_line());
			_logd("failure content - " . $response->content());
			next;
		}
		else {
			if ($response->code() != 202) {
				_logd("warning: faxback post status " . $response->code() . " != 202");
			}

			_logd("faxback post successful");
			$status = 1;

			my $fb_id = $response->content();
			chomp($fb_id);

			if (length($fb_id) == 0) {
				_log("warning: faxback post to $host missing returned fb_id");
				last;
			}

			$fb_id =~ /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/ or
				_log("warning: unexpected fb_id format $fb_id");

			if (!ref($fb_queue_qh)) {
				($fb_queue_qh) = query($dbh_fb_queue,
							q{ insert into fb_inbound_queue (fb_id, fb_username,
							   fb_ata_mac, hy_node_id, hy_queue_id, from_number,
							   to_number, pages, hy_received_time, hy_sent_time)
							   values (?, ?, ?, ?, ?, ?, ?, ?, from_unixtime(?),
							   now()) });
				if (!$fb_queue_qh) {
					_log("error: failed to prepare fb outbound queue insert query for $fb_id");
					last;
				}
			}

			my $q_status = query($dbh_fb_queue, $fb_queue_qh, $fb_id, $ata->{username}, $ata->{mac},
					     $node_id, $id, $cid_from, $cid_to, $pages, $received_time);

			$q_status or
				_log("error: failed to insert $fb_id into fb outbound queue");

			last;
		}
	}

	return $status;
}
