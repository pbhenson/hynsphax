#! /usr/bin/perl
#
# Copyright 2019-2020 Paul B. Henson <henson@acm.org>
#
# hynsphax is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Please see the LICENSE file for further details, or visit the URL
#
#         https://www.gnu.org/licenses/

use strict;
use warnings;

use DBI ();
use File::Copy ();
use LWP::UserAgent ();
use Sys::Hostname ();
use Unix::Syslog ();

my $hf_dir = '/var/spool/hylafax';

my $now = time();

require '/etc/hylafax/hynsphax.conf';
require '/etc/hylafax/hynsphax-common.pl';

# Map hylafax error codes to phaxio error codes
my $error_map = {
	exact => {
		0 => 3,
		1 => 17,
		2 => 36,
		3 => 30,
		4 => 36,
		5 => 36,
		6 => 36,
		7 => 36,
		8 => 36,
		9 => 36,
		10 => 36,
		11 => 36,
		12 => 36,
	},
	regex => {
		qr/^[5-9]\d$/ => 36,
		qr/1\d\d/ => 63,
		qr/2\d\d/ => 65,
		qr/3\d\d/ => 3,
		qr/4\d\d/ => 3,
		qr/5\d\d/ => 3,
		qr/9\d\d/ => 3,
	}
};

# Map phaxio error codes to error type and message
my $phaxio_errors = {
	3 => [ 'generalError', 'fax transmission failed' ],
	17 => [ 'lineError', 'Busy' ],
	30 => [ 'lineError', 'No answer from the fax machine'],
	36 => [ 'lineError', 'Telephony error' ],
	63 => [ 'faxError', 'Fax protocol error' ],
	65 => [ 'faxError', 'Fax protocol error' ],
};

my $debug = hynsphax_config('debug') // 0;
_log_debug($debug);

my $syslog_facility = hynsphax_config('syslog_facility') // Unix::Syslog::LOG_DAEMON;
Unix::Syslog::openlog('hynsphax-outbound-queue', Unix::Syslog::LOG_PID, $syslog_facility);

my $hostname = Sys::Hostname::hostname();

my $retry_backoff = hynsphax_config('outbound_retry_backoff');
if (!defined($retry_backoff)) {
	_log("error: no outbound_retry_backoff configured");
	exit(1);
}

my $dbh_config = dbi_connect(hynsphax_config('db_config_list'));
if (!$dbh_config) {
	_log("error: failed to connect to config database");
	exit(1);
}

my $dbh_hy_queue = dbi_connect(hynsphax_config('db_hy_queue_list'));
if (!$dbh_hy_queue) {
	_log("error: failed to connect to hy queue db");
	exit(1);
}

my $dbh_fb_queue;
my $db_fb_queue_list = hynsphax_config('db_fb_queue_list');
if ($db_fb_queue_list) {
	$dbh_fb_queue = dbi_connect($db_fb_queue_list);
	if (!$dbh_fb_queue) {
		_log("error: failed to connect to fb queue db");
		exit(1);
	}
}
else {
	$dbh_fb_queue = $dbh_config;
}

my $node_qh = query($dbh_config, 'select node_id from hy_servers where hostname = ?', $hostname);
if (!$node_qh) {
	_log("error: failed to look up server node");
	exit(1);
}

my ($node_id) = $node_qh->fetchrow_array();
if (!defined($node_id)) {
	_log("error: node id for server $hostname not found");
	exit(1);
}
_logd("server $hostname node_id $node_id");

my $retval;

if (mkdir("$hf_dir/tmp/hynsphax-send-queue.lock")) {
	_logd("processing outbound hy queue");

	$retval = process_queue();

	if (!rmdir("$hf_dir/tmp/hynsphax-send-queue.lock")) {
		_log("error: failed to remove queue lockfile - $!");
		$retval = 1;
	}
}
else {
	if ($! == 17) { # EEXIST
		_log("warning: queue lockfile exists, skipping run");
		$retval = 0;
	}
	else {
		_log("error: failed to create queue lockfile - $!");
		$retval = 1;
	}
}

exit($retval);

my (%hy_queue, $hyq_del_qh, $hyq_update_qh, $fbq_update_qh, $ua);

sub process_queue {

	_logd("checking faxstat");
	my ($status, $output) = read_pipe('/usr/bin/faxstat', '-sd', '-O', 'JobFmt:%j|%a|%y|%d|%v|%s');

	if ($status < 0) {
		_log("error: faxstat failed to execute");
		return 1;
	}
	elsif ($status != 1) {
		_log("error: faxstat failed");
		foreach (@{$output}) {
			_log("\t$_");
		}
		return 1;
	}
	else {
		foreach (@{$output}) {
			next if /^HylaFAX scheduler/;
			next if /^Modem /;
			next if /^$/;
			next if /^JID\|/;

			if (/^(\d+)\|(.)\|(\d+)\|(\d+)\|([^\|]+)\|(.*)$/) {
				my ($job_id, $state, $pages, $tries, $to, $status) =
					($1, $2, $3, $4, $5, $6);
				_logd("queue entry: $job_id, $state, $pages, $tries, $to, $status");

				$hy_queue{$job_id}{state} = $state;
				$hy_queue{$job_id}{pages} = $pages;
				$hy_queue{$job_id}{tries} = $tries;
				$hy_queue{$job_id}{to} = $to;
				$hy_queue{$job_id}{status} = $status;
			}
			else {
				_log("warning: unexpected output from faxstat - $_");
			}
		}
	}

	$ua = LWP::UserAgent->new(timeout => 30, keep_alive => 1);

	($hyq_del_qh) = query($dbh_hy_queue, 'delete from outbound where id = ?');
	if (!$hyq_del_qh) {
		_log("error: failed to prepare delete query");
		return 1;
	}

	($hyq_update_qh) = query($dbh_hy_queue, 'update outbound set last_state = ?, ' .
					 'last_status = ? where id = ?');
	if (!$hyq_update_qh) {
		_log("error: failed to prepare hy update query");
		return 1;
	}

	($fbq_update_qh) = query($dbh_fb_queue, 'update fb_outbound_queue set retries = ?, status = ?, ' .
					        'message = ?, pages = ?, hy_sent_time = from_unixtime(?), ' .
						'state = ? where fb_id = ?');

	if (!$fbq_update_qh) {
		_log("error: failed to prepare fb update query");
		return 1;
	}

	my $hyq_list_qh = query($dbh_hy_queue, 'select id, received_time, callback_url, last_state, ' .
					 'last_status from outbound');
	if (!$hyq_list_qh) {
		_log("error: failed to execute hy queue query");
		return 1;
	}

	while (my @entry_row = $hyq_list_qh->fetchrow_array()) {
		process_entry(@entry_row);
	}

	return 0;
}

sub process_entry {
	my ($id, $received_time, $callback_url, $last_state, $last_status) = @_;

	_logd("hy queue entry $id, $received_time, $callback_url, $last_state, $last_status");

	if ($last_state =~ /^(D|F)$/) {
		_logd("reviewing failed callback for completed job");

		my ($to, $pages, $fax_tries, $completed_time, $cb_tries, $last_cb_try) =
			split(/\|/, $last_status);

		$fax_tries++;

		my $delay;
		foreach (@{$retry_backoff}) {
			if ($fax_tries <= $_->[0]) {
				$delay = $_->[1];
				_logd("found delay $delay for retry $fax_tries");
				last;
			}
		}

		if (!$delay) {
			_log("warning: retry $fax_tries count exceeded for $id, removing entry");
			remove_entry($id);
		}
		elsif ($now - $last_cb_try <= $delay) {
			_logd("retry delay not met, skipping");
		}
		else {
			_logd("retrying failed callback");

			my @error_detail = $last_state eq 'F' ? error_map($id) : ();

			my $cb_status;
			if ($callback_url =~ /^faxback:(.*)$/) {
				$cb_status = fb_callback($1, $fax_tries, $pages, $completed_time,
							 $last_state eq 'D' ? 'Success' : 'Failure',
							 @error_detail);
			}
			else {
				$cb_status = phaxio_callback($callback_url,
							      $last_state eq 'D' ? 'success' : 'failure',
							      $id, $to, $pages, $received_time, $completed_time,
							      $fax_tries, @error_detail);
			}

			if ($cb_status) {
				_logd("callback succeeded, deleting hy queue entry");
				remove_entry($id);
			}
			else {
				_logd("callback failed again, updating entry");
				my $new_status = "$to|$pages|$fax_tries|$completed_time|$fax_tries|$now";

				update_entry($last_state, $new_status, $id);
			}
		}
	}
	elsif (exists($hy_queue{$id})) {
		_logd("entry found on system");

		my $state = $hy_queue{$id}{state};
		my $status = $hy_queue{$id}{status};
		my $pages = $hy_queue{$id}{pages};
		my $tries = $hy_queue{$id}{tries};
		my $to = $hy_queue{$id}{to};

		if ($state =~ /^(D|F)$/) {
			_logd("job completed with state $state, making callback");

			_logd("generating pdf/previews for $id");
			generate_pdf($id);

			my @error_detail = $state eq 'F' ? error_map($id) : ();

			my $cb_status;
			if ($callback_url =~ /^faxback:(.*)$/) {
				$cb_status = fb_callback($1, $tries, $pages, $now,
							 $state eq 'D' ? 'Success' : 'Failure',
							 @error_detail);
			}
			else {
				$cb_status = phaxio_callback($callback_url,
							     $state eq 'D' ? 'success' : 'failure', $id,
							     $to, $pages, $received_time, $now, $tries,
							     @error_detail);
			}

			if ($cb_status) {

				_logd("callback succeeded, deleting hy queue entry");
				remove_entry($id);
			}
			else {
				_logd("callback failed, updating entry for later retry");

				my $new_status = "$to|$pages|$tries|$now|1|$now";

				update_entry($state, $new_status, $id);
			}
		}
		else {
			_logd("job still pending");
			if ($last_state ne $state || $last_status ne $status) {
				_logd("status changed, updating entry");
				update_entry($state, $status, $id);
			}
		}
	}
	else {
		_log("error: pending hy queue id $id not found on system, removing");

		remove_entry($id);
	}
}

sub generate_pdf {
	my ($id) = @_;

	my $src_file;
	if (open(QF, "<$hf_dir/doneq/q$id")) {
		while (<QF>) {
			chomp;
			if (/^!pdf:0::docq\/(.*\.pdf)/) {
				$src_file = $1;
				_logd("found pdf file $src_file for id $id");
				last;
			}
			elsif (/^!postscript:0::docq\/(.*\.ps)/) {
				$src_file = $1;
				_logd("found ps file $src_file for id $id");
				last;
			}
		}
		close(QF);
	}
	else {
		_log("error: failed to open doneq/q$id - $!");
		return;
	}

	if (!$src_file) {
		_log("error: no src_file found for id $id");
		return;
	}

	my $pdf_file = "$hf_dir/doneq-pdf/fax${id}.pdf";

	my ($status, $output);
	if ($src_file =~ /\.ps$/) {
		_logd("generating pdf");
		($status, $output) = read_pipe('/usr/bin/ps2pdf',
						  "$hf_dir/docq/$src_file",
						  $pdf_file);

		if ($status < 0) {
			_logp("error: ps2pdf on $src_file failed to execute");
			return;
		}
		elsif ($status != 1) {
			_logp("error: ps2pdf on $src_file failed");
			foreach (@{$output}) {
				_logp("\t$_");
			}
			return;
		}
		else {
			foreach (@{$output}) {
				_log("warning: unexpected output from ps2pdf on $src_file - $_");
			}
		}
	}
	else {
		_logd("copying existing pdf");
		if (!File::Copy::copy("$hf_dir/docq/$src_file", $pdf_file)) {
			_logp("error: failed to copy $src_file to $pdf_file - $!");
			return;
		}
	}

	my @jpg_resolution = (129, 167);
	my $jpg_scale = hynsphax_config('jpg_s_scale');
	if (defined($jpg_scale)) {
		if ($jpg_scale > 0 && $jpg_scale =~ /^\d?\.?\d+$/) {
			$jpg_resolution[0] = int($jpg_resolution[0]*$jpg_scale + 0.5);
			$jpg_resolution[1] = int($jpg_resolution[1]*$jpg_scale + 0.5);
			_logd("jpg_s_scale = $jpg_scale, resolution set to " . join('x', @jpg_resolution));
		}
		else {
			_logp("warning: ignoring invalid jpg_s_scale $jpg_scale");
		}
	}

	my $jpg_convert_src_params = hynsphax_config('jpg_convert_src_params') // '-density 72';
	my $jpg_convert_dst_params = hynsphax_config('jpg_convert_dst_params') // '';

	_logd("generating small jpeg preview using params '$jpg_convert_src_params' / '$jpg_convert_dst_params'");
	($status, $output) = read_pipe('/usr/bin/convert', split(/\s+/, $jpg_convert_src_params),
				       "${pdf_file}[0]", split(/\s+/, $jpg_convert_dst_params), '-resize',
				       join('x', @jpg_resolution), "$hf_dir/doneq-pdf/fax${id}-s.jpg");

	if ($status < 0) {
		_logp("error: convert (small) on $pdf_file failed to execute");
		return;
	}
	elsif ($status != 1) {
		_logp("error: convert (small) on $pdf_file failed");
		foreach (@{$output}) {
			_logp("\t$_");
		}
		return;
	}
	else {
		foreach (@{$output}) {
			_log("warning: unexpected output from convert (small) on $pdf_file - $_");
		}
	}

	@jpg_resolution = (300, 388);
	$jpg_scale = hynsphax_config('jpg_l_scale');
	if (defined($jpg_scale)) {
		if ($jpg_scale > 0 && $jpg_scale =~ /^\d?\.?\d+$/) {
			$jpg_resolution[0] = int($jpg_resolution[0]*$jpg_scale + 0.5);
			$jpg_resolution[1] = int($jpg_resolution[1]*$jpg_scale + 0.5);
			_logd("jpg_l_scale = $jpg_scale, resolution set to " . join('x', @jpg_resolution));
		}
		else {
			_logp("warning: ignoring invalid jpg_l_scale $jpg_scale");
		}
	}

	_logd("generating large jpeg preview using params '$jpg_convert_src_params' / '$jpg_convert_dst_params'");
	($status, $output) = read_pipe('/usr/bin/convert', split(/\s+/, $jpg_convert_src_params),
				       "${pdf_file}[0]", split(/\s+/, $jpg_convert_dst_params), '-resize',
				       join('x', @jpg_resolution), "$hf_dir/doneq-pdf/fax${id}-l.jpg");

	if ($status < 0) {
		_logp("error: convert (large) on $pdf_file failed to execute");
		return;
	}
	elsif ($status != 1) {
		_logp("error: convert (large) on $pdf_file failed");
		foreach (@{$output}) {
			_logp("\t$_");
		}
		return;
	}
	else {
		foreach (@{$output}) {
			_log("warning: unexpected output from convert (large) on $pdf_file - $_");
		}
	}
}

sub fb_callback {
	my ($fb_id, $retries, $pages, $completed_time, $state, $error_type, $error_code, $error_id) = @_;

	my @q_params = ($retries);
	if ($state eq 'Failure') {
		push(@q_params, ($error_id, $error_code));
	}
	else {
		push(@q_params, (0, undef));
	}
	push(@q_params, ($pages, $completed_time, $state, $fb_id));

	_logd(lc($state) . " faxback callback for $fb_id (" . join(',', @q_params) . ")");

	my $status = query($dbh_fb_queue, $fbq_update_qh, @q_params);

	if (!$status) {
		_log("error: fb queue update query failed");
		return 0;
	}
	elsif($status->rows() != 1) {
		_log("warning: fb queue update query was no-op - $fb_id");
	}
	else {
		_logd("callback successful");
	}

	return 1;
}

sub phaxio_callback {
	my ($callback_url, $state, $id, $to, $pages, $request_time, $complete_time, $retries,
	    $error_type, $error_code, $error_id) = @_;

	my $fax_json = '{"id":"' . "${node_id}1${id}" . '","num_pages":' . $pages .
		       ',"cost":0,"direction":"sent","status":"' . $state .
		       '","is_test":false,"requested_at":' . $request_time .
		       ',"completed_at":' . $complete_time . ',"recipients":[{"number":"' .
		       $to . '","status":"' . $state . '","retry_count":' . $retries . ',';

	if ($state eq 'failure') {
		$fax_json .= '"error_id":"' . $error_id . '","error_code":"' . $error_code .
			     '","error_type":"' . $error_type . '",';
	}

	$fax_json .= '"completed_at":' . $complete_time . '}]}';

	_logd("$state phaxio callback to $callback_url");
	_logd("fax_json = $fax_json");

	my $response;

	eval {
		$response = $ua->post($callback_url, Content_Type => 'form-data',
						     Content => [
							fax => $fax_json,
							direction => 'sent',
							is_test => 'false',
							success => $state ]);
	};

	if ($@) {
		_log("error: callback for id $id failed - $@");
		return 0;
	}
	elsif (!$response->is_success()) {
		_log("error: callback for id $id failed - " . $response->status_line());
		_logd("failure content - " . $response->content());
		return 0;
	}
	elsif ($response->code() != 202) {
		_log("warning: $response->code() != 202; does that matter here?");
	}

	_logd("callback successful");

	return 1;
}

sub update_entry {
	my $status = query($dbh_hy_queue, $hyq_update_qh, @_);

	if (!$status) {
		_log("error: hy queue update query failed");
	}
	elsif($status->rows() != 1) {
		_log("warning: hy queue update query was no-op");
	}
}

sub remove_entry {
	my $status = query($dbh_hy_queue, $hyq_del_qh, @_);

	if (!$status) {
		_log("error: hy queue delete query failed");
	}
	elsif($status->rows() != 1) {
		_log("warning: hy queue delete query was no-op");
	}
}

sub error_map {
	my ($id) = @_;

	my $statuscode;
	if (open(QF, "<$hf_dir/doneq/q$id")) {
		while (<QF>) {
			chomp;
			if (/^statuscode:(\d+)/) {
				$statuscode = $1;
				_logd("found error status code $statuscode");
				last;
			}
		}
		close(QF);
	}
	else {
		_log("error: failed to open doneq/q$id - $!");
	}

	if (!defined($statuscode)) {
		_log("warning: no statuscode found in doneq/q$id");
		$statuscode = 0;
	}

	my $phaxio_code;
	if (exists($error_map->{exact}{$statuscode})) {
		$phaxio_code = $error_map->{exact}{$statuscode};
		_logd("found exact match $phaxio_code");
	}
	else {
		foreach my $re (keys %{$error_map->{regex}}) {
			if ($statuscode =~ $re) {
				$phaxio_code = $error_map->{regex}{$re};
				_logd("found regex match $phaxio_code");
				last;
			}
		}
	}

	if (!defined($phaxio_code)) {
		_log("warning: no phaxio error code found for $statuscode");
		$phaxio_code = $error_map->{exact}{0};
	}

	my $phaxio_error;
	$phaxio_error = $phaxio_errors->{$phaxio_code}
		if exists($phaxio_errors->{$phaxio_code});

	if (!defined($phaxio_error)) {
		_log("warning: no phaxio error found for $phaxio_code");
		$phaxio_error = $phaxio_errors->{3};
	}

	return (@{$phaxio_error}, $phaxio_code);
}
